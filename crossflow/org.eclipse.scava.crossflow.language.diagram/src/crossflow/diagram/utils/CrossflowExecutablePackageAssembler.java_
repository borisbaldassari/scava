/*
 * Copyright (c) 2018 University of York
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Last modified 05/09/18 15:17
 */

package crossflow.diagram.utils;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import org.apache.maven.shared.invoker.DefaultInvocationRequest;
import org.apache.maven.shared.invoker.DefaultInvoker;
import org.apache.maven.shared.invoker.InvocationRequest;
import org.apache.maven.shared.invoker.Invoker;
import org.apache.maven.shared.invoker.MavenInvocationException;

/**
 * Provides the ability to assemble executable packages (JARs) to be submitted
 * to the Crossflow workflow execution engine.
 *
 * Re-usable by means of {@code setPomLocation} followed by {@code run}.
 *
 * @author Patrick Neubauer
 *
 * @see {@url https://maven.apache.org/shared/maven-invoker/usage.html}
 *
 */
public class CrossflowExecutablePackageAssembler {

	private String pomLocation;
	private final Invoker invoker = new DefaultInvoker();
	private static final List<String> profiles = new ArrayList<String>();
	private static final List<String> goals = new ArrayList<String>();

	/**
	 * Sets up executable package assembler using specified target project pom file
	 * location
	 *
	 * @param pomLocation target project pom file location
	 */
	public CrossflowExecutablePackageAssembler(String pomLocation) {
		// setting target pom file location
		this.pomLocation = pomLocation;

		// setting default goal and profiles
		profiles.add("skip-tests");
		profiles.add("assemble-flink-executable");
		goals.add("package");
	}

	/**
	 * Executes package assembly process
	 */
	public void run() {

		if (pomLocation != null && !pomLocation.equals("") && Files.exists(Paths.get(pomLocation))) {
			InvocationRequest request = new DefaultInvocationRequest();
			request.setPomFile(new File(pomLocation));
			request.setGoals(goals);
			request.setProfiles(profiles);

			try {
				System.out.println("Running package assembly process ...");
				invoker.execute(request);
				System.out.println("... finished package assembly process.\n");
				System.out.println("EXECUTABLE PACKAGE LOCATION (in folder): " + Paths.get(pomLocation).getParent() + "/target/");

			} catch (MavenInvocationException e) {
				System.err.println("Failed to create executable package from target project pom file: " + pomLocation);
				System.err.println(e.getMessage());
			}

		} else {
			System.err.println("Cannot assemble executable package -- please specify valid target project pom file location!");
		}

	}// run

	public String getPomLocation() {
		return pomLocation;
	}// getPomLocation

	public void setPomLocation(String pomLocation) {
		this.pomLocation = pomLocation;
	}// setPomLocation
}
